{
  "swagger": "2.0",
  "info": {
    "title": "person-rest-api",
    "description": "This is the specification of the person REST API endpoints.",
    "version": "1.0",
    "contact": {
      "name": "person-rest-api",
      "url": "http://localhost:3007",
      "email": "tombenke@gmail.com"
    }
  },
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "host": "localhost",
  "basePath": "/",
  "tags": [
    {
      "name": "persons",
      "description": "Manage the persons"
    },
    {
      "name": "swagger",
      "description": "Static JSON format swagger file. Contains the specification of all endpoints provided by the persons."
    }
  ],
  "paths": {
    "/persons": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "List all the Persons",
        "description": "List all the Persons",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "The GET /persons response body",
              "description": "The list of persons",
              "type": "array",
              "items": {
                "type": "object",
                "description": "A person descriptor",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The unique ID of the person"
                  },
                  "familyName": {
                    "type": "string",
                    "description": "The family-name of the person"
                  },
                  "givenName": {
                    "type": "string",
                    "description": "The given-name of the person"
                  }
                },
                "required": [
                  "id",
                  "familyName",
                  "givenName"
                ]
              }
            },
            "examples": {
              "application/json": [
                {
                  "id": "2a1152ee-4d77-4ff4-a811-598555937625",
                  "familyName": "Skywalker",
                  "giveName": "Luke"
                },
                {
                  "id": "2adce0f1-397f-4923-bdf2-16334a76c29f",
                  "familyName": "Skywalker",
                  "givenName": "Anakin"
                }
              ]
            }
          }
        },
        "deprecated": false
      },
      "post": {
        "tags": [
          "persons"
        ],
        "summary": "Create a new instance of Person",
        "description": "Create a new instance of Person",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "persons",
            "description": "The person object to create",
            "required": true,
            "schema": {
              "title": "The POST /persons request body",
              "example": {
                "familyName": "Skywalker",
                "givenName": "Luke"
              },
              "description": "The description of the person to be created",
              "type": "object",
              "properties": {
                "familyName": {
                  "type": "string",
                  "description": "The family-name of the person"
                },
                "givenName": {
                  "type": "string",
                  "description": "The given-name of the person"
                }
              },
              "required": [
                "familyName"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "The POST /persons response body",
              "type": "object",
              "description": "The newly created person descriptor",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the person, generated by the service."
                },
                "familyName": {
                  "type": "string",
                  "description": "The family-name of the person."
                },
                "givenName": {
                  "type": "string",
                  "description": "The given-name of the person."
                }
              },
              "required": [
                "id",
                "familyName",
                "givenName"
              ]
            },
            "examples": {
              "application/json": {
                "id": "2a1152ee-4d77-4ff4-a811-598555937625",
                "familyName": "Skywalker",
                "givenName": "Luke"
              }
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "title": "Response schema for Error 400",
              "description": "The content of the error response in case of wrong or missing parameters",
              "example": {
                "error": "Wrong or missing request parameters"
              },
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "description": "The details about the error"
                }
              },
              "required": [
                "error"
              ]
            }
          }
        },
        "deprecated": false
      },
      "delete": {
        "tags": [
          "persons"
        ],
        "summary": "Deletes all the Persons",
        "description": "Deletes all the Persons",
        "produces": [
          "application/json"
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        },
        "deprecated": false
      }
    },
    "/persons/{personId}": {
      "get": {
        "tags": [
          "persons"
        ],
        "summary": "Get one Person",
        "description": "Get one Person",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "personId",
            "description": "The unique ID of the person to retrieve",
            "type": "string",
            "required": true,
            "x-example": "2a1152ee-4d77-4ff4-a811-598555937625"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "title": "The person body",
              "description": "The descriptor of the selected person",
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the person"
                },
                "familyName": {
                  "type": "string",
                  "description": "The family-name of the person"
                },
                "givenName": {
                  "type": "string",
                  "description": "The given-name of the person"
                }
              },
              "required": [
                "id",
                "familyName",
                "givenName"
              ]
            },
            "examples": {
              "application/json": {
                "id": "2a1152ee-4d77-4ff4-a811-598555937625",
                "familyName": "Skywalker",
                "givenName": "Luke"
              }
            }
          }
        },
        "deprecated": false
      },
      "put": {
        "tags": [
          "persons"
        ],
        "summary": "Update a Person",
        "description": "Update a Person",
        "operationId": "person.put",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "personId",
            "description": "The unique ID of the person to update",
            "type": "string",
            "required": true,
            "x-example": "2a1152ee-4d77-4ff4-a811-598555937625"
          },
          {
            "in": "body",
            "name": "person",
            "description": "The person parameters",
            "required": true,
            "schema": {
              "title": "The person request body",
              "description": "The description of the person selected by its ID",
              "example": {
                "id": "2a1152ee-4d77-4ff4-a811-598555937625",
                "familyName": "Skywalker",
                "givenName": "Luke"
              },
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "The unique ID of the person"
                },
                "familyName": {
                  "type": "string",
                  "description": "The family-name of the person"
                },
                "givenName": {
                  "type": "string",
                  "description": "The given-name of the person"
                }
              },
              "required": [
                "id",
                "familyName",
                "givenName"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/paths/~1persons~1%7BpersonId%7D/get/responses/200/schema"
            },
            "examples": {
              "application/json": {
                "id": "2a1152ee-4d77-4ff4-a811-598555937625",
                "familyName": "Skywalker",
                "givenName": "Luke"
              }
            }
          },
          "400": {
            "description": "Missing or invalid parameters",
            "schema": {
              "$ref": "#/paths/~1persons/post/responses/400/schema"
            }
          }
        },
        "deprecated": false
      }
    },
    "/api-docs/": {
      "get": {
        "tags": [
          "swagger"
        ],
        "summary": "Responses the files from the directory defined by the contentPath property",
        "x-static": {
          "contentPath": "./docs/",
          "config": {
            "dotfiles": "allow",
            "index": true
          }
        },
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        },
        "deprecated": false
      }
    }
  }
}
